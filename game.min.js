cc._loaderImage = null;
cc.LoaderScene = cc.Scene.extend({
    _interval: null,
    _length: 0,
    _count: 0,
    _label: null,
    _className: "LoaderScene",
    init: function() {
        var a = this,
            c = 200,
            b = a._bgLayer = cc.LayerColor.create(cc.color(255, 255, 255, 255));
        b.setPosition(cc.visibleRect.bottomLeft);
        a.addChild(b, 0);
        var d = 24,
            e = -c / 2 + 100;
        cc._loaderImage && (cc.loader.loadImg(cc._loaderImage, {
            isCrossOrigin: !1
        }, function(b, d) {
            c = d.height;
            a._initStage(d, cc.visibleRect.center)
        }), d = 14, e = -c / 2 - 10);
        var f = a._label = cc.LabelTTF.create("Loading... 0%", "", 1.5 * d),
            h = cc.director.getWinSize();
        f.setPosition(cc.pAdd(cc.p(h.width / 2, h.height / 2), cc.p(0, e)));
        f.setColor(cc.color(0, 0, 0));
        b.addChild(this._label, 10);
        b = cc.LabelTTF.create("Yodos Game", "", 1.5 * d);
        b.setColor(cc.color(0, 0, 0));
        b.setPosition(cc.pAdd(cc.p(h.width / 2, h.height / 2), cc.p(0, 50)));
        this.addChild(b);
        return !0
    },
    _initStage: function(a, c) {
        var b = this._texture2d = new cc.Texture2D;
        b.initWithElement(a);
        b.handleLoadedTexture();
        b = this._logo = cc.Sprite.create(b);
        b.setScale(cc.contentScaleFactor());
        b.x = c.x;
        b.y = 1.2 * c.y;
        this._bgLayer.addChild(b,
            10)
    },
    onEnter: function() {
        cc.Node.prototype.onEnter.call(this);
        this.schedule(this._startLoading, 0.3)
    },
    onExit: function() {
        cc.Node.prototype.onExit.call(this);
        this._label.setString("Loading... 0%")
    },
    initWithResources: function(a, c) {
        "string" == typeof a && (a = [a]);
        this.resources = a || [];
        this.cb = c
    },
    _startLoading: function() {
        var a = this;
        a.unschedule(a._startLoading);
        var c = a.resources;
        a._length = c.length;
        a._count = 0;
        cc.loader.load(c, function(b, c) {
            a._count = c
        }, function() {
            a.cb && a.cb()
        });
        a.schedule(a._updatePercent)
    },
    _updatePercent: function() {
        var a =
            this._count,
            c = this._length,
            b;
        b = Math.min(100 * (a / c) | 0, 100);
        this._label.setString("Loading... " + b + "%");
        a >= c && this.unschedule(this._updatePercent)
    }
});
cc.LoaderScene.preload = function(a, c) {
    var b = cc;
    b.loaderScene || (b.loaderScene = new cc.LoaderScene, b.loaderScene.init());
    b.loaderScene.initWithResources(a, c);
    cc.director.runScene(b.loaderScene);
    return b.loaderScene
};
var res = {
        Tip_png: "res/tip.png",
        Block_png: "res/block.png",
        Jump_wav: "res/jump.wav",
        Fail_wav: "res/fail.wav"
    },
    g_resources = [res.Tip_png, res.Block_png, {
        type: "font",
        name: "Marker Felt",
        srcs: ["res/fonts/Marker Felt.ttf"]
    }],
    g_resources_extra = [res.Jump_wav, res.Fail_wav];
var log = function(a) {
        CONST.DEBUG && cc.log(a)
    },
    TAG = {
        GAME_LAYER: 1001,
        BLOCK: 1002,
        SCORE_LABEL: 1003,
        HELLO_LABEL: 1004,
        GAMEOVER_LAYER: 2001,
        TIP_LAYER: 3001,
        GAMEBG_LAYER: 4001,
        FLOOR_BASE: 5001,
        FLOOR_BLOCK_BASE: 6001
    },
    STATE = {
        GAME_RUNNING: 1,
        GAME_OVER: 2,
        GAME_WAIT: 3,
        GAME_PAUSE: 4
    },
    DIR = {
        NONE: 0,
        LEFT: 1,
        RIGHT: 2
    },
    CONST = {
        DEBUG: !0,
        SOUND: !0,
        ttfMarkerFelt: "res/fonts/Marker Felt.ttf"
    },
    _score = 0,
    getRandom = function(a, c) {
        return c <= a ? a : Math.floor(Math.random() * (c - a + 1)) + a
    },
    env = function() {
        cc.sys.isNative || (CONST.SOUND = !1, CONST.ttfMarkerFelt =
            "Marker Felt")
    };
env();
var GameLayer = cc.Layer.extend({
        sprite: null,
        ctor: function() {
            this._super();
            var a = cc.director.getWinSize(),
                c = a.width / 768,
                b = cc.LayerColor.create(cc.color(255, 255, 255));
            this.addChild(b, 0);
            b = cc.LabelTTF.create("Block Go!", CONST.ttfMarkerFelt, 70 * c);
            b.x = 0.5 * b.getContentSize().width + 0.05 * a.width;
            b.y = a.height - b.getContentSize().height;
            b.setTag(TAG.HELLO_LABEL);
            b.setColor(cc.color(0, 0, 0));
            this.addChild(b, 5);
            b = cc.LabelTTF.create("0", CONST.ttfMarkerFelt, 70 * c);
            b.x = a.width - 0.5 * b.getContentSize().width - 0.05 * a.width;
            b.y = a.height - b.getContentSize().height;
            b.setColor(cc.color(0, 0, 0));
            b.setTag(TAG.SCORE_LABEL);
            this.addChild(b, 5);
            this.refresh();
            c = cc.LabelTTF.create("Yodos Game", "", 28 * c);
            c.setColor(cc.color(0, 0, 0));
            c.setPosition(cc.p(a.width / 2, c.getContentSize().height));
            this.addChild(c, 5);
            "mouse" in cc.sys.capabilities && cc.eventManager.addListener({
                    event: cc.EventListener.MOUSE,
                    onMouseDown: function(a) {
                        var b = a.getCurrentTarget();
                        a.getButton() == cc.EventMouse.BUTTON_LEFT && b.handleTouch(a.getLocation())
                    }
                },
                this);
            cc.sys.capabilities.hasOwnProperty("touches") && cc.eventManager.addListener({
                event: cc.EventListener.TOUCH_ONE_BY_ONE,
                swallowTouches: !0,
                onTouchBegan: function(a, b) {
                    b.getCurrentTarget().handleTouch(a.getLocation());
                    return !0
                }
            }, this);
            cc.sys.isNative && cc.eventManager.addListener({
                event: cc.EventListener.KEYBOARD,
                onKeyReleased: function(a, b) {
                    a == cc.KEY.back ? onBack() : a == cc.KEY.menu && cc.log("menu button clicked. keycode:" + a)
                }
            }, this);
            this.wait();
            return !0
        },
        ready: function() {},
        refresh: function() {
            this.score =
                0;
            this.state = STATE.GAME_WAIT;
            this.totalTime = 0;
            this.lastFloorPosY = -1;
            this.lastPassFloorPosY = 0;
            this.floorArr = [];
            this.blockDir = DIR.NONE;
            this.blockSpeedX = 0.15;
            this.blockSpeedY = 0;
            this.blockDeltaSpeedY = 0.7;
            this.g = -10;
            this.bgMoving = !1;
            this.updateScore(this.score);
            cc.sys.isNative;// || (wxData && (wxData.desc = wxData._desc), wxData && jiathis_config && (jiathis_config.summary = wxData._desc))
        },
        gameOver: function() {
            this.state = STATE.GAME_OVER;
            var a = new GameOverScene;
            _score = this.score;
            cc.director.runScene(cc.TransitionFade.create(0.5,
                a))
                        if(navigator.userAgent.indexOf("WeGame/0.2.0") !=-1)
            {
                window.location.href="objc://"+"gameOver:/0"; // by michael
            }
            // window.location.href="objc://"+"gameOver:/0"; // by michael
        },
        updateScore: function(a) {
            var c = cc.director.getWinSize();
            if (a != this.score) {
                this.score = a;
                var b = this.getChildByTag(TAG.SCORE_LABEL);
                b.setString(this.score);
                b.x = c.width - 0.5 * b.getContentSize().width - 0.05 * c.width
            }
            3 == a && this.updateHello("Good!", cc.color(37, 122, 179));
            5 == a && this.updateHello("Awesome!", cc.color(51, 197, 92));
            6 < a && 10 > a && this.updateHello("Awesome!", cc.color(51 + 10 * a, 197 - 10 * a, 92));
            10 <= a && 14 > a && this.updateHello("Awesome!", cc.color(51 + 10 * a, 197 - 10 * a, 92));
            15 <= a && this.updateHello("OMG!", cc.color(255,
                50, 50))
        },
        updateHello: function(a, c) {
            var b = cc.director.getWinSize(),
                d = this.getChildByTag(TAG.HELLO_LABEL),
                e = cc.Sequence.create(cc.scaleTo(0.3, 1.3), cc.scaleTo(0.3, 1));
            c && d.setColor(c);
            d.setString(a);
            d.x = 0.5 * d.getContentSize().width + 0.05 * b.width;
            d.runAction(e)
        },
        wait: function() {
            this.state = STATE.GAME_WAIT;
            var a = cc.director.getWinSize(),
                c = cc.Layer.create();
            c.setTag(TAG.TIP_LAYER);
            var b = cc.Sprite.create(res.Tip_png),
                d = b.getContentSize();
            c.addChild(b);
            c.setPosition(cc.p(a.width / 2, 0.5 * a.height - 0.5 * d.height +
                202));
            this.addChild(c, 4);
            c = cc.Sprite.create(res.Block_png);
            c.setPosition(cc.p(177 - d.width / 2 + a.width / 2, 0.5 * a.height));
            c.setTag(TAG.BLOCK);
            this.addChild(c, 5)
        },
        start: function() {
            this.state = STATE.GAME_RUNNING;
            this.removeChildByTag(TAG.TIP_LAYER);
            this.scheduleUpdate();
            this.moveGameBg()
        },
        jump: function(a) {
            var c = cc.director.getWinSize(),
                b = this.getChildByTag(TAG.BLOCK).getPositionY();
            b > 0.5 * c.height ? this.moveGameBg() : b > 0.2 * c.height && this.moveGameBg(1);
            this.blockDir = a;
            this.blockSpeedY = this.blockDeltaSpeedY;
            CONST.SOUND &&
                cc.audioEngine.playEffect(res.Jump_wav);
            log(a)
        },
        handleTouch: function(a) {
            if (this.state == STATE.GAME_WAIT) this.start();
            else if (this.state == STATE.GAME_RUNNING) {
                var c = DIR.NONE,
                    c = cc.director.getWinSize(),
                    c = a.x > c.width / 2 ? DIR.RIGHT : DIR.LEFT;
                this.jump(c)
            }
        },
        moveGameBg: function(a) {
            var c = cc.director.getWinSize();
            this.bgMoving = !0;
            var b = this,
                d = this.getChildByTag(TAG.GAMEBG_LAYER);
            if (d) {
                var e = 0.18 * -c.height;
                a && (e = 0.23 * -c.height);
                a = cc.Sequence.create(cc.MoveBy.create(0.4, cc.p(0, e)), cc.CallFunc.create(function() {
                    b.bgMoving = !1
                }))
            } else d = cc.LayerColor.create(cc.color(255, 255, 255)), d.setTag(TAG.GAMEBG_LAYER), d.setPosition(0, c.height), this.addChild(d, 2), this.appendFloor(), a = cc.Sequence.create(cc.MoveBy.create(0.3, cc.p(0, -c.height / 5)), cc.CallFunc.create(function() {
                b.bgMoving = !1
            }));
            d.runAction(a)
        },
        appendFloor: function() {
            var a = cc.director.getWinSize(),
                c = this.getChildByTag(TAG.GAMEBG_LAYER);
            if (c) {
                var b = getRandom(0.15 * a.width, 0.45 * a.width),
                    d = a.width - b - 0.4 * a.width,
                    e = 0; - 1 != this.lastFloorPosY && (e = this.lastFloorPosY + 0.6 * a.height);
                var f = cc.color(102, 130, 241);
                0 < this.score && 3 >= this.score ? f = cc.color(100, 200, 100) : 3 < this.score && (f = cc.color(200, 100, 200));
                this.lastFloorPosY = e;
                var h = cc.LayerColor.create(f, b, 50);
                h.setPosition(cc.p(0, e));
                c.addChild(h);
                var m = cc.LayerColor.create(f, d, 50);
                m.setPosition(cc.p(a.width - d, e));
                c.addChild(m);
                var g = null,
                    l = null;
                if (0 < this.score && 3 >= this.score) {
                    var g = cc.LayerColor.create(f, 20, 20),
                        k = getRandom(b - 50, a.width - d + 50);
                    g.setPosition(cc.p(k, 50 + e + 50));
                    c.addChild(g)
                } else 3 < this.score && 6 >= this.score ? (g = cc.LayerColor.create(f,
                    36, 36), k = getRandom(b - 50, a.width - d + 50), g.setPosition(cc.p(k, 50 + e + 50)), c.addChild(g)) : 6 < this.score && (g = cc.LayerColor.create(f, 20, 20), k = getRandom(b - 50, a.width - d + 50), g.setPosition(cc.p(k, 50 + e + 50)), c.addChild(g), l = cc.LayerColor.create(f, 20, 20), a = getRandom(b - 50, a.width - d + 50), l.setPosition(cc.p(a, e - 50)), c.addChild(l));
                this.floorArr.push({
                    left: h,
                    right: m,
                    top: g,
                    bottom: l,
                    y: e,
                    isPass: !1
                })
            }
        },
        update: function(a) {
            var c = cc.director.getWinSize(),
                b = this.getChildByTag(TAG.GAMEBG_LAYER);
            if (b) {
                var d = b.getPositionY();
                this.lastFloorPosY +
                    d < 0.75 * c.height && this.appendFloor();
                if (b = this.getChildByTag(TAG.BLOCK)) {
                    var e = b.getPositionY();
                    if (0 > e || e > 1.1 * c.height) this.onCollision();
                    var f = b.getBoundingBox();
                    f.y -= d;
                    for (var h = 0, m = this.floorArr.length; h < m; h++) {
                        var g = this.floorArr[h],
                            l = g.left,
                            k = g.right,
                            n = g.top,
                            p = g.bottom;
                        if (this.checkCollision(l && l.getBoundingBox(), f) || this.checkCollision(k && k.getBoundingBox(), f) || this.checkCollision(n && n.getBoundingBox(), f) || this.checkCollision(p && p.getBoundingBox(), f)) {
                            this.onCollision();
                            break
                        }!g.isPass && g.y +
                            d < e && (this.updateScore(this.score + 1), g.isPass = !0)
                    }
                    e = this.blockSpeedY;
                    this.bgMoving && (e *= 0.5);
                    d = this.g / 5E3;
                    a *= 1E3;
                    e = e * a + 0.5 * d * a * a;
                    f = this.blockSpeedX * a;
                    this.blockSpeedY += d * a;
                    a = b.getPosition();
                    a.y += e;
                    this.blockDir == DIR.LEFT && (f *= -1);
                    a.x += f;
                    0 > a.x ? a.x = 0 : a.x + 25 > c.width && (a.x = c.width - 25);
                    b.setPosition(a)
                }
            }
        },
        checkCollision: function(a, c) {
            return !a || !c ? !1 : cc.rectIntersectsRect(a, c) ? !0 : !1
        },
        onCollision: function() {
            this.unscheduleUpdate();
            this.state = STATE.GAME_PAUSE;
            var a = this.getChildByTag(TAG.BLOCK),
                c = this.getChildByTag(TAG.GAMEBG_LAYER);
            a && c && (a.stopAllActions(), c.stopAllActions());
            var b = this;
            this.playDeathAction(function() {
                b.gameOver()
            })
        },
        playDeathAction: function(a) {
            var c = this.getChildByTag(TAG.GAMEBG_LAYER),
                b = cc.director.getWinSize(),
                d = cc.Sequence.create(cc.moveBy(0.08, cc.p(15, 15)), cc.moveBy(0.08, cc.p(-15, -15))),
                d = cc.Sequence.create(cc.Repeat.create(d, 3), cc.CallFunc.create(function() {
                    a && a()
                }));
            c.runAction(d);
            c = cc.Spawn.create(cc.rotateBy(1, 360), cc.moveBy(1, cc.p(0, -b.height)));
            (b = this.getChildByTag(TAG.BLOCK)) && b.runAction(c);
            CONST.SOUND &&
                cc.audioEngine.playEffect(res.Fail_wav)
        }
    }),
    GameScene = cc.Scene.extend({
        onEnter: function() {
            this._super();
            var a = new GameLayer;
            a.setTag(TAG.GAME_LAYER);
            this.addChild(a)
        },
        onEnterTransitionDidFinish: function() {
            this.getChildByTag(TAG.GAME_LAYER).ready()
        }
    }),
    GameOverLayer = cc.Layer.extend({
        sprite: null,
        ctor: function() {
            this._super();
            var a = cc.director.getWinSize(),
                c = a.width / 768,
                b = cc.LayerColor.create(cc.color(0, 255, 255));
            this.addChild(b);
            b = cc.LabelTTF.create("Game Over", "", 100 * c);
            b.x = a.width / 2;
            b.y = 0.68 * a.height;
            b.setColor(cc.color(0, 0, 0));
            this.addChild(b, 5);
            b = cc.LabelTTF.create(this.getScoreString(_score), CONST.ttfMarkerFelt, 76 * c);
            b.setColor(cc.color(0, 0, 0));
            b.setPosition(cc.p(a.width / 2, 0.5 * a.height));
            this.addChild(b);
            b = this.getBest();
            b >= _score && (b = cc.LabelTTF.create("Best: " + b, CONST.ttfMarkerFelt, 55 * c), b.setColor(cc.color(200, 0, 0)), b.setPosition(cc.p(a.width / 2, 0.58 * a.height)), this.addChild(b));
            b = cc.LabelTTF.create("Rate", CONST.ttfMarkerFelt, 60 * c);
            b.setColor(cc.color(100, 200, 0));
            var b = cc.MenuItemLabel.create(b,
                    function() {
                        log("share click.");
                        this.onShare()
                    }, this),
                d = cc.LabelTTF.create("Restart", CONST.ttfMarkerFelt, 60 * c);
            d.setColor(cc.color(200, 100, 0));
            d = cc.MenuItemLabel.create(d, function() {
                log("restart click.");
                this.onRestart()
            }, this);
            // d = cc.Menu.create(b, d);  //decamincow
            d = cc.Menu.create(d);
            d.alignItemsHorizontallyWithPadding(b.getContentSize().width / 2);
            d.setPosition(cc.p(a.width / 2, 0.35 * a.height));
            this.addChild(d);
            c = cc.LabelTTF.create("Yodos Game", "", 32 * c);
            c.setColor(cc.color(0, 0, 0));
            c.setPosition(cc.p(a.width / 2, c.getContentSize().height));
            this.addChild(c);
            a = "\u6211\u5728\u201c\u65b9\u5757\u51b2\u51b2\u51b2\u201d\u4e2d\u51b2\u5230\u4e86" + _score + "\u5c42\uff0c\u5feb\u6765\u6bd4\u4e00\u6bd4\u5427\uff01";
            cc.sys.isNative ? (cc.eventManager.addListener({
                    event: cc.EventListener.KEYBOARD,
                    onKeyReleased: function(a, b) {
                        a == cc.KEY.back ? onBack() : a == cc.KEY.menu && cc.log("menu button clicked. keycode:" + a)
                    }
                }, this), cc.eventManager.addCustomListener(cc.game.EVENT_HIDE, function() {}), cc.eventManager.addCustomListener(cc.game.EVENT_SHOW, function() {}), this.shareText =
                a) : 1+1 //(wxData && (wxData.desc = a), jiathis_config.summary && (jiathis_config.summary = a))
        },
        getScoreString: function(a) {
            return "Your Score : " + a
        },
        onShare: function() {
                        if(navigator.userAgent.indexOf("WeGame/0.2.0") !=-1)
            {
                window.location.href="objc://"+"rateGame:/0";
            }
              // window.location.href="objc://"+"rateGame:/0";
//            cc.sys.isNative ? openShare(this.shareText) : flyfishShare && flyfishShare.show()
        },
        onRestart: function() {
            cc.director.runScene(cc.TransitionFade.create(0.5, new GameScene))
        },
        playerNewRecord: function() {
            var a = cc.director.getWinSize(),
                c = cc.LabelTTF.create("New Record!", CONST.ttfMarkerFelt, 76 * (a.width / 768));
            c.setColor(cc.color(250, 0, 0));
            c.setRotation(-40);
            c.setPosition(a.width /
                2, a.height / 2);
            c.setScale(3);
            this.addChild(c);
            c.runAction(cc.Sequence.create(cc.DelayTime.create(0.1), cc.scaleTo(0.2, 1)))
        },
        getBest: function() {
            var a = parseInt(cc.sys.localStorage.getItem("blackgogogo_best"));
            isNaN(a) && (a = 0);
            return a
        },
        updateBest: function(a) {
            cc.sys.localStorage.setItem("blackgogogo_best", a)
        },
        ready: function() {
            _score > this.getBest() && (this.playerNewRecord(), this.updateBest(_score), cc.sys.isNative )// || flyfishShare && flyfishShare.show())
        }
    }),
    GameOverScene = cc.Scene.extend({
        onEnter: function() {
            this._super();
            var a = new GameOverLayer;
            a.setTag(TAG.GAMEOVER_LAYER);
            this.addChild(a)
        },
        onEnterTransitionDidFinish: function() {
            this.getChildByTag(TAG.GAMEOVER_LAYER).ready()
        }
    });
cc.game.onStart = function() {
    cc.view.setDesignResolutionSize(480, 800, cc.ResolutionPolicy.SHOW_ALL);
    cc.sys.isNative ? (cc.view.setDesignResolutionSize(480, 800, cc.ResolutionPolicy.NO_BORDER), g_resources = g_resources.concat(g_resources_extra)) : cc.view.resizeWithBrowserSize(!0);
    cc.LoaderScene.preload(g_resources, function() {
        cc.director.runScene(cc.TransitionFade.create(1, new GameScene))
    }, this)
};
cc.game.run();